pipeline:
  name: Dev EKS Cluster
  identifier: Dev_EKS_Cluster
  projectIdentifier: default_project
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Build Artifact
        identifier: Build_Artifact
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: false
            override: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Compile Binary
                  identifier: Compile_Binary
                  spec:
                    shell: Sh
                    command: |-
                      export COMMIT_SHA="<+codebase.commitSha>"


                      cat manifests/hello_eks.yaml

                      cd app

                      go mod init aedifex/app

                      make build \
                        COMMIT_SHA="<+codebase.commitSha>" \
                        GIT_BRANCH="<+codebase.branch>" \
                        DEPLOYED_BY="<+pipeline.triggeredBy.email>"
              - step:
                  type: BuildAndPushECR
                  name: Build and Push to ECR
                  identifier: Build_and_Push_to_ECR
                  spec:
                    connectorRef: account.Aedifex_Dev
                    region: us-west-2
                    account: "824987503353"
                    imageName: harness
                    tags:
                      - <+pipeline.sequenceId>
                    dockerfile: app/Dockerfile
          buildIntelligence:
            enabled: false
    - stage:
        name: Deploy to Dev EKS Cluster
        identifier: Deploy_EKS_Dev
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: Globex
          environment:
            environmentRef: Dev_EKS
            deployToAll: false
            infrastructureDefinitions:
              - identifier: Dev_EKS
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: Custom
        identifier: Custom
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - parallel:
                  - step:
                      type: ShellScript
                      name: Expose Deployment
                      identifier: Expose_Deployment
                      spec:
                        shell: Bash
                        executionTarget: {}
                        source:
                          type: Inline
                          spec:
                            script: |-
                              echo "Listing services in namespace: default"
                              kubectl get svc -n default
                        environmentVariables: []
                        outputVariables: []
                      timeout: 10m
                  - step:
                      type: ShellScript
                      name: Health Check
                      identifier: Health_Check
                      spec:
                        shell: Bash
                        executionTarget: {}
                        source:
                          type: Inline
                          spec:
                            script: |
                              #!/bin/bash

                              URL="http://$(kubectl get svc aedifex-app -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"

                              echo "Hitting app at: $URL"

                              # Curl it and check for a 200 OK response
                              STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")

                              if [[ "$STATUS_CODE" -eq 200 ]]; then
                                echo "✅ Smoke test passed!"
                              else
                                echo "❌ Smoke test failed. Status code: $STATUS_CODE"
                                exit 1
                              fi
                        environmentVariables: []
                        outputVariables: []
                      timeout: 10m
          environment:
            environmentRef: Dev_EKS
            deployToAll: false
            infrastructureDefinitions:
              - identifier: Dev_EKS
        tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.Github_OAuth_1720712504098
        repoName: aedifex/cdk8s
        build: <+input>
